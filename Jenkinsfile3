pipeline {
    agent any
	parameters {
		string(defaultValue: 'nginxdemos/hello', description: '', name: 'repoName')
		string(defaultValue: 'EKS-Demo-vpc', description: '', name: 'vpcStackName')
		string(defaultValue: 'EKS-Demo-Cluster', description: '', name: 'clusterStackName')
		string(defaultValue: 'EKS-Demo-Nodegroup', description: '', name: 'nodegroupStackName')
		
    }
    environment {
		REGION="us-east-2";
    }	
    stages {
        stage('CleanWorkSpace') {
            steps {
                sh 'rm -rf *'
                checkout scm
            }
        }
		 
		stage('Scan Nginx image of ECR') {
            steps {	
                //if there is CRITICAL warning, stop deploying Nginx image to EKS	
                sh '''
                #aws ecr start-image-scan --registry-id $AWSACCOUNT --region $REGION --repository-name $repoName --image-id imageTag=latest
                #aws ecr wait image-scan-complete --registry-id $AWSACCOUNT --region $REGION --repository-name $repoName --image-id imageTag=latest
                SCAN_FINDINGS=$(aws ecr describe-image-scan-findings --registry-id $AWSACCOUNT --region $REGION --repository-name $repoName --image-id imageTag=latest | jq '.imageScanFindings.findingSeverityCounts')
                CRITICAL=$(echo $SCAN_FINDINGS | jq '.CRITICAL')
                if [ $CRITICAL != null ] ; then
                    echo Docker image contains vulnerabilities at CRITICAL or HIGH level
                    exit 1  #exit execution due to docker image vulnerabilitiesr
                fi
                # aws ecr describe-image-scan-findings --registry-id 592269360669 --repository-name nginxdemos/hello --image-id imageTag=latest --query imageScanFindings | grep "CRITICAL"
			    '''
            }
        }
		
		stage('Deploy Nginx to EKS') {
		    steps {			
			    sh '''
				   export REPOSITORY=$(aws ecr describe-repositories --repository-name $repoName  --region $REGION --query "repositories[0].repositoryUri" --output text)
                   sed -ri "/\\{REPOSITORY\\}/ s#\\{REPOSITORY\\}#$REPOSITORY#" deployment.yaml'''
				sh  '''
     				/usr/local/bin/kubectl apply -f deployment.yaml
					/usr/local/bin/kubectl apply -f service.yaml
					/usr/local/bin/kubectl get pods
					/usr/local/bin/kubectl describe deployment
					/usr/local/bin/kubectl get deployments
					/usr/local/bin/kubectl get svc --all-namespaces | grep LoadBalancer | awk '{print $5}'
					/usr/local/bin/kubectl get svc/nginx -o=jsonpath="{.status.loadBalancer.ingress..hostname}"

					'''
			}
		}

		

	}
}
